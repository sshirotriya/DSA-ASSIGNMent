#include <iostream>
using namespace std;

struct Node{
	int data;
	Node *prev;
};
 
Node* createNewNode(int val){
	Node *temp = new Node;
	temp->data = val;
	return temp;
}

//complete the functions
class Stack{
	Node *head;
	Node *tail;
	int s;
	
	public:
	//constructor is called whenever an object of the class is declared
	Stack(){
		cout<<"constructor is Called\n";
		tail=NULL;
		s=0; 
	}
	
	//push the value at the back
	void push(int val){
		cout<<"pushing the val: "<<val<<" at the back of queue\n";
		if(head=tail=NULL){
		    head=createNewNode(val);
		    tail=head;
		    s++;
		}
		else{
		    Node *ptr;
		    ptr=createNewNode(val);
		    ptr->prev=tail;
		    tail=ptr;
		    s++;
		}
	}
	
	int top(){
		cout<<"returning the value at top or last\n";
		cout<<tail->data;
		return 0;
	}
	
	void pop(){
		cout<<"removing the last element\n";
		Node *ptr=tail;
		tail=tail->prev;
		free(ptr);
	}
	
	int size(){
		cout<<"return the size of the queue\n"<<s+1;
		return 0;
	}
	
	bool isEmpty(){
		cout<<"returning if the stack is empty\n";
		if(tail==NULL) return true;
	}
};

int main() {
	Stack s; //constructor is called on this line
	s.push(4);
	cout<<"top: "<<s.top()<<"\n";
	s.pop();
	cout<<"size: "<<s.size()<<"\n";
	cout<<"empty: "<<s.isEmpty()<<"\n";
	
	s.push(5);
	s.push(3);
	cout<<"front: "<<s.top()<<"\n";
	s.pop();
	cout<<"size: "<<s.size()<<"\n";
	cout<<"empty: "<<s.isEmpty()<<"\n";
	
	cout<<"top: "<<s.top()<<"\n";
	s.pop();
	cout<<"size: "<<s.size()<<"\n";
	cout<<"empty: "<<s.isEmpty()<<"\n";
	return 0;
}
